from aiogram import Router, types, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.file_manager import list_directory, get_full_path, get_all_subfolders
from keyboards.navigator import build_navigation_keyboard, build_upload_folder_keyboard, build_navigation_keyboard_with_select
from keyboards.main_menu import get_main_menu
from utils.is_admin import is_admin
from config import BASE_DIR
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
from urllib.parse import quote, unquote
from keyboards.navigator import get_path_by_key
from keyboards.navigator import store_path


router = Router()

class AdminStates(StatesGroup):
    waiting_for_target_folder = State()
    waiting_for_subfolder_name = State()
    waiting_for_upload_folder = State()
    waiting_for_upload_navigation = State()
    waiting_for_file_upload = State()
    waiting_for_create_navigation = State()
    waiting_for_new_folder_name = State()

@router.message(F.text.in_({"/start", "üìÇ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã"}))
async def start_command(message: types.Message):
    print(f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
    is_admin_user = is_admin(message.from_user.id)
    is_admin_user = is_admin(message.from_user.id)  
    reply_kb = get_main_menu(is_admin=is_admin_user)


    folders, files = list_directory()
    kb = build_navigation_keyboard("", folders, files)

    if kb:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:", reply_markup=kb)
    else:
        await message.answer("üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞.")



@router.message(F.text.in_({"/help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}))
async def help_command(message: types.Message):
    text = (
        "ü§ñ *–§–∞–π–ª–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º –ø—Ä—è–º–æ –∏–∑ Telegram.\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ—Ç—á—ë—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n\n"
        "üìÇ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üòâ"
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=get_main_menu())

@router.callback_query(F.data.startswith("open:"))
async def open_folder(callback: CallbackQuery):
    key = callback.data.split(":", 1)[1]
    path = get_path_by_key(key)

    folders, files = list_directory(path)
    kb = build_navigation_keyboard(path, folders, files)
    if kb:
        await callback.message.edit_text(f"üìÇ –ü–∞–ø–∫–∞: /{path or ''}", reply_markup=kb)
    else:
        await callback.message.edit_text("üìÇ –≠—Ç–∞ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞.")


@router.callback_query(F.data.startswith("file:"))
async def send_file(callback: CallbackQuery):
    key = callback.data.split(":", 1)[1]
    path = get_path_by_key(key)
    full_path = get_full_path(path)

    try:
        await callback.message.answer_document(types.FSInputFile(full_path))
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)
# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    folders, _ = list_directory()
    if not folders:
        return await message.answer("üìÅ –í –∫–æ—Ä–Ω–µ –Ω–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞.")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üìÅ {name}",
                callback_data=f"admin_create:{store_path(name)}"
            )
        ]
        for name in folders
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É:", reply_markup=kb)
    await state.set_state(AdminStates.waiting_for_target_folder)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∞–ø–∫–∏ ---
@router.callback_query(F.data.startswith("admin_create:"), AdminStates.waiting_for_target_folder)
async def choose_target_folder(callback: CallbackQuery, state: FSMContext):
    key = callback.data.split(":", 1)[1]
    folder = get_path_by_key(key)

    await state.update_data(target_folder=folder)
    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ `{folder}`", parse_mode="Markdown")
    await state.set_state(AdminStates.waiting_for_subfolder_name)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∞–ø–∫–∏ ---
@router.message(AdminStates.waiting_for_subfolder_name)
async def create_subfolder(message: types.Message, state: FSMContext):
    data = await state.get_data()
    parent = data.get("target_folder")
    subfolder = message.text.strip()

    if ".." in subfolder or subfolder.startswith("/"):
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏.")
        await state.clear()
        return

    full_path = os.path.join(BASE_DIR, parent, subfolder)
    try:
        os.makedirs(full_path, exist_ok=True)
        await message.answer(f"‚úÖ –ü–∞–ø–∫–∞ `{parent}/{subfolder}` —Å–æ–∑–¥–∞–Ω–∞.", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
    await state.clear()

@router.message(F.text == "üóÇ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É")
async def start_folder_create(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    folders, _ = list_directory("")
    kb = build_navigation_keyboard_with_select("", folders, "createpath")
    await message.answer("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É:", reply_markup=kb)
    await state.set_state(AdminStates.waiting_for_create_navigation)
@router.message(F.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
async def start_upload_navigation(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    folders, _ = list_directory("")  # –∫–æ—Ä–µ–Ω—å
    kb = build_upload_folder_keyboard("", folders)
    await message.answer("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", reply_markup=kb)
    await state.set_state(AdminStates.waiting_for_upload_navigation)

    
@router.callback_query(F.data.startswith("createpath:"), AdminStates.waiting_for_create_navigation)
async def navigate_create_folders(callback: CallbackQuery, state: FSMContext):
    key = callback.data.split(":", 1)[1]
    path = get_path_by_key(key)

    folders, _ = list_directory(path)
    kb = build_navigation_keyboard_with_select(path, folders, "createpath")
    await callback.message.edit_text(f"üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: /{path or ''}", reply_markup=kb)
@router.callback_query(F.data.startswith("createpath_select:"), AdminStates.waiting_for_create_navigation)
async def confirm_create_folder_path(callback: CallbackQuery, state: FSMContext):
    key = callback.data.split(":", 1)[1]
    path = get_path_by_key(key)

    await state.update_data(target_folder=path)
    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ `{path}`", parse_mode="Markdown")
    await state.set_state(AdminStates.waiting_for_new_folder_name)
@router.message(AdminStates.waiting_for_new_folder_name)
async def create_subfolder_from_nav(message: types.Message, state: FSMContext):
    data = await state.get_data()
    parent = data.get("target_folder")
    subfolder = message.text.strip()

    if ".." in subfolder or subfolder.startswith("/"):
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏.")
        await state.clear()
        return

    full_path = os.path.join(BASE_DIR, parent, subfolder)
    try:
        os.makedirs(full_path, exist_ok=True)
        await message.answer(f"‚úÖ –ü–∞–ø–∫–∞ `{parent}/{subfolder}` —Å–æ–∑–¥–∞–Ω–∞.", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")

    await state.clear()

@router.callback_query(F.data.startswith("uploadnav:"), AdminStates.waiting_for_upload_navigation)
async def navigate_upload_folders(callback: CallbackQuery, state: FSMContext):
    key = callback.data.split(":", 1)[1]
    path = get_path_by_key(key)

    folders, _ = list_directory(path)
    kb = build_upload_folder_keyboard(path, folders)
    await callback.message.edit_text(f"üìÇ –ü–∞–ø–∫–∞: /{path or ''}", reply_markup=kb)
@router.message(AdminStates.waiting_for_file_upload, F.document)
async def handle_file_upload(message: types.Message, state: FSMContext):
    data = await state.get_data()
    folder = data.get("upload_folder")
    document = message.document

    if not document:
        return await message.answer("‚õî –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª.")

    file_path = os.path.join(BASE_DIR, folder, document.file_name)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Bot API
    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, destination=file_path)

    await message.answer(f"‚úÖ –§–∞–π–ª `{document.file_name}` –∑–∞–≥—Ä—É–∂–µ–Ω –≤ `{folder}`.", parse_mode="Markdown")
    await state.clear()

@router.callback_query(F.data.startswith("uploadselect:"), AdminStates.waiting_for_upload_navigation)
async def select_folder_for_upload(callback: CallbackQuery, state: FSMContext):
    key = callback.data.split(":", 1)[1]
    path = get_path_by_key(key)

    if not path:
        return await callback.message.answer("‚õî –û—à–∏–±–∫–∞: –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(upload_folder=path)
    await callback.message.answer(f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ `{path}`", parse_mode="Markdown")
    await state.set_state(AdminStates.waiting_for_file_upload)
